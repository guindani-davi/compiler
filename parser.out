Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOTDOT
    ERROR

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM ID SEMICOLON CORPO
Rule 2     CORPO -> DECLARACOES BEGIN LISTA_COM END
Rule 3     CORPO -> BEGIN LISTA_COM END
Rule 4     DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR LISTA_FUNC
Rule 5     DECLARACOES -> empty
Rule 6     DEF_CONST -> CONST LISTA_CONST
Rule 7     DEF_CONST -> empty
Rule 8     LISTA_CONST -> CONSTANTE LISTA_CONST
Rule 9     LISTA_CONST -> CONSTANTE
Rule 10    CONSTANTE -> ID ASSIGN CONST_VALOR SEMICOLON
Rule 11    CONST_VALOR -> STRING
Rule 12    CONST_VALOR -> EXP_MAT
Rule 13    DEF_TIPOS -> TYPE LISTA_TIPOS
Rule 14    DEF_TIPOS -> empty
Rule 15    LISTA_TIPOS -> TIPO SEMICOLON LISTA_TIPOS
Rule 16    LISTA_TIPOS -> TIPO
Rule 17    TIPO -> ID ASSIGN TIPO_DADO
Rule 18    TIPO_DADO -> INTEGER
Rule 19    TIPO_DADO -> REAL
Rule 20    TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO
Rule 21    TIPO_DADO -> RECORD LISTA_VAR END
Rule 22    TIPO_DADO -> ID
Rule 23    DEF_VAR -> VAR LISTA_VAR
Rule 24    DEF_VAR -> empty
Rule 25    LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR
Rule 26    LISTA_VAR -> VARIAVEL
Rule 27    VARIAVEL -> LISTA_ID COLON TIPO_DADO
Rule 28    LISTA_ID -> ID COMMA LISTA_ID
Rule 29    LISTA_ID -> ID
Rule 30    LISTA_FUNC -> FUNCAO LISTA_FUNC
Rule 31    LISTA_FUNC -> empty
Rule 32    FUNCAO -> FUNCTION ID LPAREN PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO
Rule 33    FUNCAO -> FUNCTION ID LPAREN RPAREN COLON TIPO_DADO BLOCO_FUNCAO
Rule 34    PARAM_FORM -> PARAM COMMA PARAM_FORM
Rule 35    PARAM_FORM -> PARAM
Rule 36    PARAM -> LISTA_ID COLON TIPO_DADO
Rule 37    BLOCO_FUNCAO -> DEF_VAR BLOCO
Rule 38    BLOCO_FUNCAO -> BLOCO
Rule 39    BLOCO -> BEGIN LISTA_COM END
Rule 40    BLOCO -> COMANDO
Rule 41    LISTA_COM -> COMANDO SEMICOLON LISTA_COM
Rule 42    LISTA_COM -> COMANDO
Rule 43    COMANDO -> NOME ASSIGN VALOR
Rule 44    COMANDO -> WHILE EXP_LOGICA BLOCO
Rule 45    COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE BLOCO
Rule 46    COMANDO -> IF EXP_LOGICA THEN BLOCO
Rule 47    COMANDO -> WRITE LPAREN EXP_MAT RPAREN
Rule 48    COMANDO -> WRITE LPAREN STRING RPAREN
Rule 49    COMANDO -> READ LPAREN NOME RPAREN
Rule 50    COMANDO -> BEGIN LISTA_COM END
Rule 51    VALOR -> EXP_MAT
Rule 52    VALOR -> ID LISTA_ARG
Rule 53    LISTA_ARG -> LPAREN LISTA_EXP RPAREN
Rule 54    LISTA_ARG -> LPAREN RPAREN
Rule 55    LISTA_ARG -> empty
Rule 56    LISTA_EXP -> EXP_MAT COMMA LISTA_EXP
Rule 57    LISTA_EXP -> EXP_MAT
Rule 58    EXP_LOGICA -> EXP_REL
Rule 59    EXP_REL -> EXP_MAT OP_REL EXP_MAT
Rule 60    EXP_REL -> EXP_MAT
Rule 61    OP_REL -> EQUALS
Rule 62    OP_REL -> DIFF
Rule 63    OP_REL -> LT
Rule 64    OP_REL -> LE
Rule 65    OP_REL -> GT
Rule 66    OP_REL -> GE
Rule 67    EXP_MAT -> TERMO PLUS EXP_MAT
Rule 68    EXP_MAT -> TERMO MINUS EXP_MAT
Rule 69    EXP_MAT -> TERMO
Rule 70    TERMO -> FATOR TIMES TERMO
Rule 71    TERMO -> FATOR DIVIDE TERMO
Rule 72    TERMO -> FATOR
Rule 73    FATOR -> PARAMETRO
Rule 74    FATOR -> LPAREN EXP_MAT RPAREN
Rule 75    PARAMETRO -> NOME
Rule 76    PARAMETRO -> NUM_INT
Rule 77    PARAMETRO -> NUM_REAL
Rule 78    NOME -> ID NOME_CONT
Rule 79    NOME -> ID
Rule 80    NOME_CONT -> DOT ID NOME_CONT
Rule 81    NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT
Rule 82    NOME_CONT -> empty
Rule 83    empty -> <empty>

Terminals, with rules where they appear

ARRAY                : 20
ASSIGN               : 10 17 43
BEGIN                : 2 3 39 50
COLON                : 27 32 33 36
COMMA                : 28 34 56
CONST                : 6
DIFF                 : 62
DIVIDE               : 71
DOT                  : 80
DOTDOT               : 
ELSE                 : 45
END                  : 2 3 21 39 50
EQUALS               : 61
ERROR                : 
FUNCTION             : 32 33
GE                   : 66
GT                   : 65
ID                   : 1 10 17 22 28 29 32 33 52 78 79 80
IF                   : 45 46
INTEGER              : 18
LBRACKET             : 20 81
LE                   : 64
LPAREN               : 32 33 47 48 49 53 54 74
LT                   : 63
MINUS                : 68
NUM_INT              : 20 76
NUM_REAL             : 77
OF                   : 20
PLUS                 : 67
PROGRAM              : 1
RBRACKET             : 20 81
READ                 : 49
REAL                 : 19
RECORD               : 21
RPAREN               : 32 33 47 48 49 53 54 74
SEMICOLON            : 1 10 15 25 41
STRING               : 11 48
THEN                 : 45 46
TIMES                : 70
TYPE                 : 13
VAR                  : 23
WHILE                : 44
WRITE                : 47 48
error                : 

Nonterminals, with rules where they appear

BLOCO                : 37 38 44 45 45 46
BLOCO_FUNCAO         : 32 33
COMANDO              : 40 41 42
CONSTANTE            : 8 9
CONST_VALOR          : 10
CORPO                : 1
DECLARACOES          : 2
DEF_CONST            : 4
DEF_TIPOS            : 4
DEF_VAR              : 4 37
EXP_LOGICA           : 44 45 46
EXP_MAT              : 12 47 51 56 57 59 59 60 67 68 74 81
EXP_REL              : 58
FATOR                : 70 71 72
FUNCAO               : 30
LISTA_ARG            : 52
LISTA_COM            : 2 3 39 41 50
LISTA_CONST          : 6 8
LISTA_EXP            : 53 56
LISTA_FUNC           : 4 30
LISTA_ID             : 27 28 36
LISTA_TIPOS          : 13 15
LISTA_VAR            : 21 23 25
NOME                 : 43 49 75
NOME_CONT            : 78 80 81
OP_REL               : 59
PARAM                : 34 35
PARAMETRO            : 73
PARAM_FORM           : 32 34
PROGRAMA             : 0
TERMO                : 67 68 69 70 71
TIPO                 : 15 16
TIPO_DADO            : 17 20 27 32 33 36
VALOR                : 43
VARIAVEL             : 25 26
empty                : 5 7 14 24 31 55 82

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM ID SEMICOLON CORPO

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . ID SEMICOLON CORPO

    ID              shift and go to state 3


state 3

    (1) PROGRAMA -> PROGRAM ID . SEMICOLON CORPO

    SEMICOLON       shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM ID SEMICOLON . CORPO
    (2) CORPO -> . DECLARACOES BEGIN LISTA_COM END
    (3) CORPO -> . BEGIN LISTA_COM END
    (4) DECLARACOES -> . DEF_CONST DEF_TIPOS DEF_VAR LISTA_FUNC
    (5) DECLARACOES -> . empty
    (6) DEF_CONST -> . CONST LISTA_CONST
    (7) DEF_CONST -> . empty
    (83) empty -> .

  ! shift/reduce conflict for BEGIN resolved as shift
    BEGIN           shift and go to state 7
    CONST           shift and go to state 10
    TYPE            reduce using rule 83 (empty -> .)
    VAR             reduce using rule 83 (empty -> .)
    FUNCTION        reduce using rule 83 (empty -> .)

  ! BEGIN           [ reduce using rule 83 (empty -> .) ]

    CORPO                          shift and go to state 5
    DECLARACOES                    shift and go to state 6
    DEF_CONST                      shift and go to state 8
    empty                          shift and go to state 9

state 5

    (1) PROGRAMA -> PROGRAM ID SEMICOLON CORPO .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM ID SEMICOLON CORPO .)


state 6

    (2) CORPO -> DECLARACOES . BEGIN LISTA_COM END

    BEGIN           shift and go to state 11


state 7

    (3) CORPO -> BEGIN . LISTA_COM END
    (41) LISTA_COM -> . COMANDO SEMICOLON LISTA_COM
    (42) LISTA_COM -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    BEGIN           shift and go to state 12
    ID              shift and go to state 20

    LISTA_COM                      shift and go to state 13
    COMANDO                        shift and go to state 14
    NOME                           shift and go to state 15

state 8

    (4) DECLARACOES -> DEF_CONST . DEF_TIPOS DEF_VAR LISTA_FUNC
    (13) DEF_TIPOS -> . TYPE LISTA_TIPOS
    (14) DEF_TIPOS -> . empty
    (83) empty -> .

    TYPE            shift and go to state 22
    VAR             reduce using rule 83 (empty -> .)
    FUNCTION        reduce using rule 83 (empty -> .)
    BEGIN           reduce using rule 83 (empty -> .)

    DEF_TIPOS                      shift and go to state 21
    empty                          shift and go to state 23

state 9

    (5) DECLARACOES -> empty .
    (7) DEF_CONST -> empty .

  ! reduce/reduce conflict for BEGIN resolved using rule 5 (DECLARACOES -> empty .)
    BEGIN           reduce using rule 5 (DECLARACOES -> empty .)
    TYPE            reduce using rule 7 (DEF_CONST -> empty .)
    VAR             reduce using rule 7 (DEF_CONST -> empty .)
    FUNCTION        reduce using rule 7 (DEF_CONST -> empty .)

  ! BEGIN           [ reduce using rule 7 (DEF_CONST -> empty .) ]


state 10

    (6) DEF_CONST -> CONST . LISTA_CONST
    (8) LISTA_CONST -> . CONSTANTE LISTA_CONST
    (9) LISTA_CONST -> . CONSTANTE
    (10) CONSTANTE -> . ID ASSIGN CONST_VALOR SEMICOLON

    ID              shift and go to state 26

    LISTA_CONST                    shift and go to state 24
    CONSTANTE                      shift and go to state 25

state 11

    (2) CORPO -> DECLARACOES BEGIN . LISTA_COM END
    (41) LISTA_COM -> . COMANDO SEMICOLON LISTA_COM
    (42) LISTA_COM -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    BEGIN           shift and go to state 12
    ID              shift and go to state 20

    LISTA_COM                      shift and go to state 27
    COMANDO                        shift and go to state 14
    NOME                           shift and go to state 15

state 12

    (50) COMANDO -> BEGIN . LISTA_COM END
    (41) LISTA_COM -> . COMANDO SEMICOLON LISTA_COM
    (42) LISTA_COM -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    BEGIN           shift and go to state 12
    ID              shift and go to state 20

    LISTA_COM                      shift and go to state 28
    COMANDO                        shift and go to state 14
    NOME                           shift and go to state 15

state 13

    (3) CORPO -> BEGIN LISTA_COM . END

    END             shift and go to state 29


state 14

    (41) LISTA_COM -> COMANDO . SEMICOLON LISTA_COM
    (42) LISTA_COM -> COMANDO .

    SEMICOLON       shift and go to state 30
    END             reduce using rule 42 (LISTA_COM -> COMANDO .)


state 15

    (43) COMANDO -> NOME . ASSIGN VALOR

    ASSIGN          shift and go to state 31


state 16

    (44) COMANDO -> WHILE . EXP_LOGICA BLOCO
    (58) EXP_LOGICA -> . EXP_REL
    (59) EXP_REL -> . EXP_MAT OP_REL EXP_MAT
    (60) EXP_REL -> . EXP_MAT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    EXP_LOGICA                     shift and go to state 32
    EXP_REL                        shift and go to state 33
    EXP_MAT                        shift and go to state 34
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 17

    (45) COMANDO -> IF . EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> IF . EXP_LOGICA THEN BLOCO
    (58) EXP_LOGICA -> . EXP_REL
    (59) EXP_REL -> . EXP_MAT OP_REL EXP_MAT
    (60) EXP_REL -> . EXP_MAT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    EXP_LOGICA                     shift and go to state 42
    EXP_REL                        shift and go to state 33
    EXP_MAT                        shift and go to state 34
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 18

    (47) COMANDO -> WRITE . LPAREN EXP_MAT RPAREN
    (48) COMANDO -> WRITE . LPAREN STRING RPAREN

    LPAREN          shift and go to state 43


state 19

    (49) COMANDO -> READ . LPAREN NOME RPAREN

    LPAREN          shift and go to state 44


state 20

    (78) NOME -> ID . NOME_CONT
    (79) NOME -> ID .
    (80) NOME_CONT -> . DOT ID NOME_CONT
    (81) NOME_CONT -> . LBRACKET EXP_MAT RBRACKET NOME_CONT
    (82) NOME_CONT -> . empty
    (83) empty -> .

  ! reduce/reduce conflict for ASSIGN resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for EQUALS resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for DIFF resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for LE resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for GE resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for BEGIN resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for WRITE resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for READ resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for THEN resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for END resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 79 (NOME -> ID .)
    ASSIGN          reduce using rule 79 (NOME -> ID .)
    TIMES           reduce using rule 79 (NOME -> ID .)
    DIVIDE          reduce using rule 79 (NOME -> ID .)
    PLUS            reduce using rule 79 (NOME -> ID .)
    MINUS           reduce using rule 79 (NOME -> ID .)
    EQUALS          reduce using rule 79 (NOME -> ID .)
    DIFF            reduce using rule 79 (NOME -> ID .)
    LT              reduce using rule 79 (NOME -> ID .)
    LE              reduce using rule 79 (NOME -> ID .)
    GT              reduce using rule 79 (NOME -> ID .)
    GE              reduce using rule 79 (NOME -> ID .)
    BEGIN           reduce using rule 79 (NOME -> ID .)
    WHILE           reduce using rule 79 (NOME -> ID .)
    IF              reduce using rule 79 (NOME -> ID .)
    WRITE           reduce using rule 79 (NOME -> ID .)
    READ            reduce using rule 79 (NOME -> ID .)
    ID              reduce using rule 79 (NOME -> ID .)
    THEN            reduce using rule 79 (NOME -> ID .)
    RPAREN          reduce using rule 79 (NOME -> ID .)
    RBRACKET        reduce using rule 79 (NOME -> ID .)
    SEMICOLON       reduce using rule 79 (NOME -> ID .)
    END             reduce using rule 79 (NOME -> ID .)
    ELSE            reduce using rule 79 (NOME -> ID .)
    FUNCTION        reduce using rule 79 (NOME -> ID .)
    COMMA           reduce using rule 79 (NOME -> ID .)
    DOT             shift and go to state 46
    LBRACKET        shift and go to state 47

  ! ASSIGN          [ reduce using rule 83 (empty -> .) ]
  ! TIMES           [ reduce using rule 83 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 83 (empty -> .) ]
  ! PLUS            [ reduce using rule 83 (empty -> .) ]
  ! MINUS           [ reduce using rule 83 (empty -> .) ]
  ! EQUALS          [ reduce using rule 83 (empty -> .) ]
  ! DIFF            [ reduce using rule 83 (empty -> .) ]
  ! LT              [ reduce using rule 83 (empty -> .) ]
  ! LE              [ reduce using rule 83 (empty -> .) ]
  ! GT              [ reduce using rule 83 (empty -> .) ]
  ! GE              [ reduce using rule 83 (empty -> .) ]
  ! BEGIN           [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! WRITE           [ reduce using rule 83 (empty -> .) ]
  ! READ            [ reduce using rule 83 (empty -> .) ]
  ! ID              [ reduce using rule 83 (empty -> .) ]
  ! THEN            [ reduce using rule 83 (empty -> .) ]
  ! RPAREN          [ reduce using rule 83 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 83 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 83 (empty -> .) ]
  ! END             [ reduce using rule 83 (empty -> .) ]
  ! ELSE            [ reduce using rule 83 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 83 (empty -> .) ]
  ! COMMA           [ reduce using rule 83 (empty -> .) ]

    NOME_CONT                      shift and go to state 45
    empty                          shift and go to state 48

state 21

    (4) DECLARACOES -> DEF_CONST DEF_TIPOS . DEF_VAR LISTA_FUNC
    (23) DEF_VAR -> . VAR LISTA_VAR
    (24) DEF_VAR -> . empty
    (83) empty -> .

    VAR             shift and go to state 50
    FUNCTION        reduce using rule 83 (empty -> .)
    BEGIN           reduce using rule 83 (empty -> .)

    DEF_VAR                        shift and go to state 49
    empty                          shift and go to state 51

state 22

    (13) DEF_TIPOS -> TYPE . LISTA_TIPOS
    (15) LISTA_TIPOS -> . TIPO SEMICOLON LISTA_TIPOS
    (16) LISTA_TIPOS -> . TIPO
    (17) TIPO -> . ID ASSIGN TIPO_DADO

    ID              shift and go to state 54

    LISTA_TIPOS                    shift and go to state 52
    TIPO                           shift and go to state 53

state 23

    (14) DEF_TIPOS -> empty .

    VAR             reduce using rule 14 (DEF_TIPOS -> empty .)
    FUNCTION        reduce using rule 14 (DEF_TIPOS -> empty .)
    BEGIN           reduce using rule 14 (DEF_TIPOS -> empty .)


state 24

    (6) DEF_CONST -> CONST LISTA_CONST .

    TYPE            reduce using rule 6 (DEF_CONST -> CONST LISTA_CONST .)
    VAR             reduce using rule 6 (DEF_CONST -> CONST LISTA_CONST .)
    FUNCTION        reduce using rule 6 (DEF_CONST -> CONST LISTA_CONST .)
    BEGIN           reduce using rule 6 (DEF_CONST -> CONST LISTA_CONST .)


state 25

    (8) LISTA_CONST -> CONSTANTE . LISTA_CONST
    (9) LISTA_CONST -> CONSTANTE .
    (8) LISTA_CONST -> . CONSTANTE LISTA_CONST
    (9) LISTA_CONST -> . CONSTANTE
    (10) CONSTANTE -> . ID ASSIGN CONST_VALOR SEMICOLON

    TYPE            reduce using rule 9 (LISTA_CONST -> CONSTANTE .)
    VAR             reduce using rule 9 (LISTA_CONST -> CONSTANTE .)
    FUNCTION        reduce using rule 9 (LISTA_CONST -> CONSTANTE .)
    BEGIN           reduce using rule 9 (LISTA_CONST -> CONSTANTE .)
    ID              shift and go to state 26

    CONSTANTE                      shift and go to state 25
    LISTA_CONST                    shift and go to state 55

state 26

    (10) CONSTANTE -> ID . ASSIGN CONST_VALOR SEMICOLON

    ASSIGN          shift and go to state 56


state 27

    (2) CORPO -> DECLARACOES BEGIN LISTA_COM . END

    END             shift and go to state 57


state 28

    (50) COMANDO -> BEGIN LISTA_COM . END

    END             shift and go to state 58


state 29

    (3) CORPO -> BEGIN LISTA_COM END .

    $end            reduce using rule 3 (CORPO -> BEGIN LISTA_COM END .)


state 30

    (41) LISTA_COM -> COMANDO SEMICOLON . LISTA_COM
    (41) LISTA_COM -> . COMANDO SEMICOLON LISTA_COM
    (42) LISTA_COM -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    BEGIN           shift and go to state 12
    ID              shift and go to state 20

    COMANDO                        shift and go to state 14
    LISTA_COM                      shift and go to state 59
    NOME                           shift and go to state 15

state 31

    (43) COMANDO -> NOME ASSIGN . VALOR
    (51) VALOR -> . EXP_MAT
    (52) VALOR -> . ID LISTA_ARG
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    ID              shift and go to state 62
    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41

    NOME                           shift and go to state 39
    VALOR                          shift and go to state 60
    EXP_MAT                        shift and go to state 61
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37

state 32

    (44) COMANDO -> WHILE EXP_LOGICA . BLOCO
    (39) BLOCO -> . BEGIN LISTA_COM END
    (40) BLOCO -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    BEGIN           shift and go to state 64
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    ID              shift and go to state 20

    BLOCO                          shift and go to state 63
    COMANDO                        shift and go to state 65
    NOME                           shift and go to state 15

state 33

    (58) EXP_LOGICA -> EXP_REL .

    BEGIN           reduce using rule 58 (EXP_LOGICA -> EXP_REL .)
    WHILE           reduce using rule 58 (EXP_LOGICA -> EXP_REL .)
    IF              reduce using rule 58 (EXP_LOGICA -> EXP_REL .)
    WRITE           reduce using rule 58 (EXP_LOGICA -> EXP_REL .)
    READ            reduce using rule 58 (EXP_LOGICA -> EXP_REL .)
    ID              reduce using rule 58 (EXP_LOGICA -> EXP_REL .)
    THEN            reduce using rule 58 (EXP_LOGICA -> EXP_REL .)


state 34

    (59) EXP_REL -> EXP_MAT . OP_REL EXP_MAT
    (60) EXP_REL -> EXP_MAT .
    (61) OP_REL -> . EQUALS
    (62) OP_REL -> . DIFF
    (63) OP_REL -> . LT
    (64) OP_REL -> . LE
    (65) OP_REL -> . GT
    (66) OP_REL -> . GE

    BEGIN           reduce using rule 60 (EXP_REL -> EXP_MAT .)
    WHILE           reduce using rule 60 (EXP_REL -> EXP_MAT .)
    IF              reduce using rule 60 (EXP_REL -> EXP_MAT .)
    WRITE           reduce using rule 60 (EXP_REL -> EXP_MAT .)
    READ            reduce using rule 60 (EXP_REL -> EXP_MAT .)
    ID              reduce using rule 60 (EXP_REL -> EXP_MAT .)
    THEN            reduce using rule 60 (EXP_REL -> EXP_MAT .)
    EQUALS          shift and go to state 67
    DIFF            shift and go to state 68
    LT              shift and go to state 69
    LE              shift and go to state 70
    GT              shift and go to state 71
    GE              shift and go to state 72

    OP_REL                         shift and go to state 66

state 35

    (67) EXP_MAT -> TERMO . PLUS EXP_MAT
    (68) EXP_MAT -> TERMO . MINUS EXP_MAT
    (69) EXP_MAT -> TERMO .

    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    EQUALS          reduce using rule 69 (EXP_MAT -> TERMO .)
    DIFF            reduce using rule 69 (EXP_MAT -> TERMO .)
    LT              reduce using rule 69 (EXP_MAT -> TERMO .)
    LE              reduce using rule 69 (EXP_MAT -> TERMO .)
    GT              reduce using rule 69 (EXP_MAT -> TERMO .)
    GE              reduce using rule 69 (EXP_MAT -> TERMO .)
    BEGIN           reduce using rule 69 (EXP_MAT -> TERMO .)
    WHILE           reduce using rule 69 (EXP_MAT -> TERMO .)
    IF              reduce using rule 69 (EXP_MAT -> TERMO .)
    WRITE           reduce using rule 69 (EXP_MAT -> TERMO .)
    READ            reduce using rule 69 (EXP_MAT -> TERMO .)
    ID              reduce using rule 69 (EXP_MAT -> TERMO .)
    THEN            reduce using rule 69 (EXP_MAT -> TERMO .)
    SEMICOLON       reduce using rule 69 (EXP_MAT -> TERMO .)
    END             reduce using rule 69 (EXP_MAT -> TERMO .)
    ELSE            reduce using rule 69 (EXP_MAT -> TERMO .)
    FUNCTION        reduce using rule 69 (EXP_MAT -> TERMO .)
    RPAREN          reduce using rule 69 (EXP_MAT -> TERMO .)
    RBRACKET        reduce using rule 69 (EXP_MAT -> TERMO .)
    COMMA           reduce using rule 69 (EXP_MAT -> TERMO .)


state 36

    (70) TERMO -> FATOR . TIMES TERMO
    (71) TERMO -> FATOR . DIVIDE TERMO
    (72) TERMO -> FATOR .

    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    PLUS            reduce using rule 72 (TERMO -> FATOR .)
    MINUS           reduce using rule 72 (TERMO -> FATOR .)
    EQUALS          reduce using rule 72 (TERMO -> FATOR .)
    DIFF            reduce using rule 72 (TERMO -> FATOR .)
    LT              reduce using rule 72 (TERMO -> FATOR .)
    LE              reduce using rule 72 (TERMO -> FATOR .)
    GT              reduce using rule 72 (TERMO -> FATOR .)
    GE              reduce using rule 72 (TERMO -> FATOR .)
    BEGIN           reduce using rule 72 (TERMO -> FATOR .)
    WHILE           reduce using rule 72 (TERMO -> FATOR .)
    IF              reduce using rule 72 (TERMO -> FATOR .)
    WRITE           reduce using rule 72 (TERMO -> FATOR .)
    READ            reduce using rule 72 (TERMO -> FATOR .)
    ID              reduce using rule 72 (TERMO -> FATOR .)
    THEN            reduce using rule 72 (TERMO -> FATOR .)
    SEMICOLON       reduce using rule 72 (TERMO -> FATOR .)
    END             reduce using rule 72 (TERMO -> FATOR .)
    ELSE            reduce using rule 72 (TERMO -> FATOR .)
    FUNCTION        reduce using rule 72 (TERMO -> FATOR .)
    RPAREN          reduce using rule 72 (TERMO -> FATOR .)
    RBRACKET        reduce using rule 72 (TERMO -> FATOR .)
    COMMA           reduce using rule 72 (TERMO -> FATOR .)


state 37

    (73) FATOR -> PARAMETRO .

    TIMES           reduce using rule 73 (FATOR -> PARAMETRO .)
    DIVIDE          reduce using rule 73 (FATOR -> PARAMETRO .)
    PLUS            reduce using rule 73 (FATOR -> PARAMETRO .)
    MINUS           reduce using rule 73 (FATOR -> PARAMETRO .)
    EQUALS          reduce using rule 73 (FATOR -> PARAMETRO .)
    DIFF            reduce using rule 73 (FATOR -> PARAMETRO .)
    LT              reduce using rule 73 (FATOR -> PARAMETRO .)
    LE              reduce using rule 73 (FATOR -> PARAMETRO .)
    GT              reduce using rule 73 (FATOR -> PARAMETRO .)
    GE              reduce using rule 73 (FATOR -> PARAMETRO .)
    BEGIN           reduce using rule 73 (FATOR -> PARAMETRO .)
    WHILE           reduce using rule 73 (FATOR -> PARAMETRO .)
    IF              reduce using rule 73 (FATOR -> PARAMETRO .)
    WRITE           reduce using rule 73 (FATOR -> PARAMETRO .)
    READ            reduce using rule 73 (FATOR -> PARAMETRO .)
    ID              reduce using rule 73 (FATOR -> PARAMETRO .)
    THEN            reduce using rule 73 (FATOR -> PARAMETRO .)
    SEMICOLON       reduce using rule 73 (FATOR -> PARAMETRO .)
    END             reduce using rule 73 (FATOR -> PARAMETRO .)
    ELSE            reduce using rule 73 (FATOR -> PARAMETRO .)
    FUNCTION        reduce using rule 73 (FATOR -> PARAMETRO .)
    RPAREN          reduce using rule 73 (FATOR -> PARAMETRO .)
    RBRACKET        reduce using rule 73 (FATOR -> PARAMETRO .)
    COMMA           reduce using rule 73 (FATOR -> PARAMETRO .)


state 38

    (74) FATOR -> LPAREN . EXP_MAT RPAREN
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    EXP_MAT                        shift and go to state 77
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 39

    (75) PARAMETRO -> NOME .

    TIMES           reduce using rule 75 (PARAMETRO -> NOME .)
    DIVIDE          reduce using rule 75 (PARAMETRO -> NOME .)
    PLUS            reduce using rule 75 (PARAMETRO -> NOME .)
    MINUS           reduce using rule 75 (PARAMETRO -> NOME .)
    EQUALS          reduce using rule 75 (PARAMETRO -> NOME .)
    DIFF            reduce using rule 75 (PARAMETRO -> NOME .)
    LT              reduce using rule 75 (PARAMETRO -> NOME .)
    LE              reduce using rule 75 (PARAMETRO -> NOME .)
    GT              reduce using rule 75 (PARAMETRO -> NOME .)
    GE              reduce using rule 75 (PARAMETRO -> NOME .)
    BEGIN           reduce using rule 75 (PARAMETRO -> NOME .)
    WHILE           reduce using rule 75 (PARAMETRO -> NOME .)
    IF              reduce using rule 75 (PARAMETRO -> NOME .)
    WRITE           reduce using rule 75 (PARAMETRO -> NOME .)
    READ            reduce using rule 75 (PARAMETRO -> NOME .)
    ID              reduce using rule 75 (PARAMETRO -> NOME .)
    THEN            reduce using rule 75 (PARAMETRO -> NOME .)
    SEMICOLON       reduce using rule 75 (PARAMETRO -> NOME .)
    END             reduce using rule 75 (PARAMETRO -> NOME .)
    ELSE            reduce using rule 75 (PARAMETRO -> NOME .)
    FUNCTION        reduce using rule 75 (PARAMETRO -> NOME .)
    RPAREN          reduce using rule 75 (PARAMETRO -> NOME .)
    RBRACKET        reduce using rule 75 (PARAMETRO -> NOME .)
    COMMA           reduce using rule 75 (PARAMETRO -> NOME .)


state 40

    (76) PARAMETRO -> NUM_INT .

    TIMES           reduce using rule 76 (PARAMETRO -> NUM_INT .)
    DIVIDE          reduce using rule 76 (PARAMETRO -> NUM_INT .)
    PLUS            reduce using rule 76 (PARAMETRO -> NUM_INT .)
    MINUS           reduce using rule 76 (PARAMETRO -> NUM_INT .)
    EQUALS          reduce using rule 76 (PARAMETRO -> NUM_INT .)
    DIFF            reduce using rule 76 (PARAMETRO -> NUM_INT .)
    LT              reduce using rule 76 (PARAMETRO -> NUM_INT .)
    LE              reduce using rule 76 (PARAMETRO -> NUM_INT .)
    GT              reduce using rule 76 (PARAMETRO -> NUM_INT .)
    GE              reduce using rule 76 (PARAMETRO -> NUM_INT .)
    BEGIN           reduce using rule 76 (PARAMETRO -> NUM_INT .)
    WHILE           reduce using rule 76 (PARAMETRO -> NUM_INT .)
    IF              reduce using rule 76 (PARAMETRO -> NUM_INT .)
    WRITE           reduce using rule 76 (PARAMETRO -> NUM_INT .)
    READ            reduce using rule 76 (PARAMETRO -> NUM_INT .)
    ID              reduce using rule 76 (PARAMETRO -> NUM_INT .)
    THEN            reduce using rule 76 (PARAMETRO -> NUM_INT .)
    SEMICOLON       reduce using rule 76 (PARAMETRO -> NUM_INT .)
    END             reduce using rule 76 (PARAMETRO -> NUM_INT .)
    ELSE            reduce using rule 76 (PARAMETRO -> NUM_INT .)
    FUNCTION        reduce using rule 76 (PARAMETRO -> NUM_INT .)
    RPAREN          reduce using rule 76 (PARAMETRO -> NUM_INT .)
    RBRACKET        reduce using rule 76 (PARAMETRO -> NUM_INT .)
    COMMA           reduce using rule 76 (PARAMETRO -> NUM_INT .)


state 41

    (77) PARAMETRO -> NUM_REAL .

    TIMES           reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    DIVIDE          reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    PLUS            reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    MINUS           reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    EQUALS          reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    DIFF            reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    LT              reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    LE              reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    GT              reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    GE              reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    BEGIN           reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    WHILE           reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    IF              reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    WRITE           reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    READ            reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    ID              reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    THEN            reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    SEMICOLON       reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    END             reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    ELSE            reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    FUNCTION        reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    RPAREN          reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    RBRACKET        reduce using rule 77 (PARAMETRO -> NUM_REAL .)
    COMMA           reduce using rule 77 (PARAMETRO -> NUM_REAL .)


state 42

    (45) COMANDO -> IF EXP_LOGICA . THEN BLOCO ELSE BLOCO
    (46) COMANDO -> IF EXP_LOGICA . THEN BLOCO

    THEN            shift and go to state 78


state 43

    (47) COMANDO -> WRITE LPAREN . EXP_MAT RPAREN
    (48) COMANDO -> WRITE LPAREN . STRING RPAREN
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    STRING          shift and go to state 80
    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    EXP_MAT                        shift and go to state 79
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 44

    (49) COMANDO -> READ LPAREN . NOME RPAREN
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    ID              shift and go to state 20

    NOME                           shift and go to state 81

state 45

    (78) NOME -> ID NOME_CONT .

    ASSIGN          reduce using rule 78 (NOME -> ID NOME_CONT .)
    TIMES           reduce using rule 78 (NOME -> ID NOME_CONT .)
    DIVIDE          reduce using rule 78 (NOME -> ID NOME_CONT .)
    PLUS            reduce using rule 78 (NOME -> ID NOME_CONT .)
    MINUS           reduce using rule 78 (NOME -> ID NOME_CONT .)
    EQUALS          reduce using rule 78 (NOME -> ID NOME_CONT .)
    DIFF            reduce using rule 78 (NOME -> ID NOME_CONT .)
    LT              reduce using rule 78 (NOME -> ID NOME_CONT .)
    LE              reduce using rule 78 (NOME -> ID NOME_CONT .)
    GT              reduce using rule 78 (NOME -> ID NOME_CONT .)
    GE              reduce using rule 78 (NOME -> ID NOME_CONT .)
    BEGIN           reduce using rule 78 (NOME -> ID NOME_CONT .)
    WHILE           reduce using rule 78 (NOME -> ID NOME_CONT .)
    IF              reduce using rule 78 (NOME -> ID NOME_CONT .)
    WRITE           reduce using rule 78 (NOME -> ID NOME_CONT .)
    READ            reduce using rule 78 (NOME -> ID NOME_CONT .)
    ID              reduce using rule 78 (NOME -> ID NOME_CONT .)
    THEN            reduce using rule 78 (NOME -> ID NOME_CONT .)
    SEMICOLON       reduce using rule 78 (NOME -> ID NOME_CONT .)
    END             reduce using rule 78 (NOME -> ID NOME_CONT .)
    ELSE            reduce using rule 78 (NOME -> ID NOME_CONT .)
    FUNCTION        reduce using rule 78 (NOME -> ID NOME_CONT .)
    RPAREN          reduce using rule 78 (NOME -> ID NOME_CONT .)
    RBRACKET        reduce using rule 78 (NOME -> ID NOME_CONT .)
    COMMA           reduce using rule 78 (NOME -> ID NOME_CONT .)


state 46

    (80) NOME_CONT -> DOT . ID NOME_CONT

    ID              shift and go to state 82


state 47

    (81) NOME_CONT -> LBRACKET . EXP_MAT RBRACKET NOME_CONT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    EXP_MAT                        shift and go to state 83
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 48

    (82) NOME_CONT -> empty .

    ASSIGN          reduce using rule 82 (NOME_CONT -> empty .)
    TIMES           reduce using rule 82 (NOME_CONT -> empty .)
    DIVIDE          reduce using rule 82 (NOME_CONT -> empty .)
    PLUS            reduce using rule 82 (NOME_CONT -> empty .)
    MINUS           reduce using rule 82 (NOME_CONT -> empty .)
    EQUALS          reduce using rule 82 (NOME_CONT -> empty .)
    DIFF            reduce using rule 82 (NOME_CONT -> empty .)
    LT              reduce using rule 82 (NOME_CONT -> empty .)
    LE              reduce using rule 82 (NOME_CONT -> empty .)
    GT              reduce using rule 82 (NOME_CONT -> empty .)
    GE              reduce using rule 82 (NOME_CONT -> empty .)
    BEGIN           reduce using rule 82 (NOME_CONT -> empty .)
    WHILE           reduce using rule 82 (NOME_CONT -> empty .)
    IF              reduce using rule 82 (NOME_CONT -> empty .)
    WRITE           reduce using rule 82 (NOME_CONT -> empty .)
    READ            reduce using rule 82 (NOME_CONT -> empty .)
    ID              reduce using rule 82 (NOME_CONT -> empty .)
    THEN            reduce using rule 82 (NOME_CONT -> empty .)
    RPAREN          reduce using rule 82 (NOME_CONT -> empty .)
    RBRACKET        reduce using rule 82 (NOME_CONT -> empty .)
    SEMICOLON       reduce using rule 82 (NOME_CONT -> empty .)
    END             reduce using rule 82 (NOME_CONT -> empty .)
    ELSE            reduce using rule 82 (NOME_CONT -> empty .)
    FUNCTION        reduce using rule 82 (NOME_CONT -> empty .)
    COMMA           reduce using rule 82 (NOME_CONT -> empty .)


state 49

    (4) DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR . LISTA_FUNC
    (30) LISTA_FUNC -> . FUNCAO LISTA_FUNC
    (31) LISTA_FUNC -> . empty
    (32) FUNCAO -> . FUNCTION ID LPAREN PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO
    (33) FUNCAO -> . FUNCTION ID LPAREN RPAREN COLON TIPO_DADO BLOCO_FUNCAO
    (83) empty -> .

    FUNCTION        shift and go to state 87
    BEGIN           reduce using rule 83 (empty -> .)

    LISTA_FUNC                     shift and go to state 84
    FUNCAO                         shift and go to state 85
    empty                          shift and go to state 86

state 50

    (23) DEF_VAR -> VAR . LISTA_VAR
    (25) LISTA_VAR -> . VARIAVEL SEMICOLON LISTA_VAR
    (26) LISTA_VAR -> . VARIAVEL
    (27) VARIAVEL -> . LISTA_ID COLON TIPO_DADO
    (28) LISTA_ID -> . ID COMMA LISTA_ID
    (29) LISTA_ID -> . ID

    ID              shift and go to state 91

    LISTA_VAR                      shift and go to state 88
    VARIAVEL                       shift and go to state 89
    LISTA_ID                       shift and go to state 90

state 51

    (24) DEF_VAR -> empty .

    FUNCTION        reduce using rule 24 (DEF_VAR -> empty .)
    BEGIN           reduce using rule 24 (DEF_VAR -> empty .)
    WHILE           reduce using rule 24 (DEF_VAR -> empty .)
    IF              reduce using rule 24 (DEF_VAR -> empty .)
    WRITE           reduce using rule 24 (DEF_VAR -> empty .)
    READ            reduce using rule 24 (DEF_VAR -> empty .)
    ID              reduce using rule 24 (DEF_VAR -> empty .)


state 52

    (13) DEF_TIPOS -> TYPE LISTA_TIPOS .

    VAR             reduce using rule 13 (DEF_TIPOS -> TYPE LISTA_TIPOS .)
    FUNCTION        reduce using rule 13 (DEF_TIPOS -> TYPE LISTA_TIPOS .)
    BEGIN           reduce using rule 13 (DEF_TIPOS -> TYPE LISTA_TIPOS .)


state 53

    (15) LISTA_TIPOS -> TIPO . SEMICOLON LISTA_TIPOS
    (16) LISTA_TIPOS -> TIPO .

    SEMICOLON       shift and go to state 92
    VAR             reduce using rule 16 (LISTA_TIPOS -> TIPO .)
    FUNCTION        reduce using rule 16 (LISTA_TIPOS -> TIPO .)
    BEGIN           reduce using rule 16 (LISTA_TIPOS -> TIPO .)


state 54

    (17) TIPO -> ID . ASSIGN TIPO_DADO

    ASSIGN          shift and go to state 93


state 55

    (8) LISTA_CONST -> CONSTANTE LISTA_CONST .

    TYPE            reduce using rule 8 (LISTA_CONST -> CONSTANTE LISTA_CONST .)
    VAR             reduce using rule 8 (LISTA_CONST -> CONSTANTE LISTA_CONST .)
    FUNCTION        reduce using rule 8 (LISTA_CONST -> CONSTANTE LISTA_CONST .)
    BEGIN           reduce using rule 8 (LISTA_CONST -> CONSTANTE LISTA_CONST .)


state 56

    (10) CONSTANTE -> ID ASSIGN . CONST_VALOR SEMICOLON
    (11) CONST_VALOR -> . STRING
    (12) CONST_VALOR -> . EXP_MAT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    STRING          shift and go to state 95
    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    CONST_VALOR                    shift and go to state 94
    EXP_MAT                        shift and go to state 96
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 57

    (2) CORPO -> DECLARACOES BEGIN LISTA_COM END .

    $end            reduce using rule 2 (CORPO -> DECLARACOES BEGIN LISTA_COM END .)


state 58

    (50) COMANDO -> BEGIN LISTA_COM END .

    SEMICOLON       reduce using rule 50 (COMANDO -> BEGIN LISTA_COM END .)
    END             reduce using rule 50 (COMANDO -> BEGIN LISTA_COM END .)


state 59

    (41) LISTA_COM -> COMANDO SEMICOLON LISTA_COM .

    END             reduce using rule 41 (LISTA_COM -> COMANDO SEMICOLON LISTA_COM .)


state 60

    (43) COMANDO -> NOME ASSIGN VALOR .

    SEMICOLON       reduce using rule 43 (COMANDO -> NOME ASSIGN VALOR .)
    END             reduce using rule 43 (COMANDO -> NOME ASSIGN VALOR .)
    ELSE            reduce using rule 43 (COMANDO -> NOME ASSIGN VALOR .)
    FUNCTION        reduce using rule 43 (COMANDO -> NOME ASSIGN VALOR .)
    BEGIN           reduce using rule 43 (COMANDO -> NOME ASSIGN VALOR .)


state 61

    (51) VALOR -> EXP_MAT .

    SEMICOLON       reduce using rule 51 (VALOR -> EXP_MAT .)
    END             reduce using rule 51 (VALOR -> EXP_MAT .)
    ELSE            reduce using rule 51 (VALOR -> EXP_MAT .)
    FUNCTION        reduce using rule 51 (VALOR -> EXP_MAT .)
    BEGIN           reduce using rule 51 (VALOR -> EXP_MAT .)


state 62

    (52) VALOR -> ID . LISTA_ARG
    (78) NOME -> ID . NOME_CONT
    (79) NOME -> ID .
    (53) LISTA_ARG -> . LPAREN LISTA_EXP RPAREN
    (54) LISTA_ARG -> . LPAREN RPAREN
    (55) LISTA_ARG -> . empty
    (80) NOME_CONT -> . DOT ID NOME_CONT
    (81) NOME_CONT -> . LBRACKET EXP_MAT RBRACKET NOME_CONT
    (82) NOME_CONT -> . empty
    (83) empty -> .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for END resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for BEGIN resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 79 (NOME -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 79 (NOME -> ID .)
    TIMES           reduce using rule 79 (NOME -> ID .)
    DIVIDE          reduce using rule 79 (NOME -> ID .)
    PLUS            reduce using rule 79 (NOME -> ID .)
    MINUS           reduce using rule 79 (NOME -> ID .)
    SEMICOLON       reduce using rule 79 (NOME -> ID .)
    END             reduce using rule 79 (NOME -> ID .)
    ELSE            reduce using rule 79 (NOME -> ID .)
    FUNCTION        reduce using rule 79 (NOME -> ID .)
    BEGIN           reduce using rule 79 (NOME -> ID .)
    LPAREN          shift and go to state 98
    DOT             shift and go to state 46
    LBRACKET        shift and go to state 47

  ! SEMICOLON       [ reduce using rule 83 (empty -> .) ]
  ! END             [ reduce using rule 83 (empty -> .) ]
  ! ELSE            [ reduce using rule 83 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 83 (empty -> .) ]
  ! BEGIN           [ reduce using rule 83 (empty -> .) ]
  ! TIMES           [ reduce using rule 83 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 83 (empty -> .) ]
  ! PLUS            [ reduce using rule 83 (empty -> .) ]
  ! MINUS           [ reduce using rule 83 (empty -> .) ]

    LISTA_ARG                      shift and go to state 97
    NOME_CONT                      shift and go to state 45
    empty                          shift and go to state 99

state 63

    (44) COMANDO -> WHILE EXP_LOGICA BLOCO .

    SEMICOLON       reduce using rule 44 (COMANDO -> WHILE EXP_LOGICA BLOCO .)
    END             reduce using rule 44 (COMANDO -> WHILE EXP_LOGICA BLOCO .)
    ELSE            reduce using rule 44 (COMANDO -> WHILE EXP_LOGICA BLOCO .)
    FUNCTION        reduce using rule 44 (COMANDO -> WHILE EXP_LOGICA BLOCO .)
    BEGIN           reduce using rule 44 (COMANDO -> WHILE EXP_LOGICA BLOCO .)


state 64

    (39) BLOCO -> BEGIN . LISTA_COM END
    (50) COMANDO -> BEGIN . LISTA_COM END
    (41) LISTA_COM -> . COMANDO SEMICOLON LISTA_COM
    (42) LISTA_COM -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    BEGIN           shift and go to state 12
    ID              shift and go to state 20

    LISTA_COM                      shift and go to state 100
    COMANDO                        shift and go to state 14
    NOME                           shift and go to state 15

state 65

    (40) BLOCO -> COMANDO .

    SEMICOLON       reduce using rule 40 (BLOCO -> COMANDO .)
    END             reduce using rule 40 (BLOCO -> COMANDO .)
    ELSE            reduce using rule 40 (BLOCO -> COMANDO .)
    FUNCTION        reduce using rule 40 (BLOCO -> COMANDO .)
    BEGIN           reduce using rule 40 (BLOCO -> COMANDO .)


state 66

    (59) EXP_REL -> EXP_MAT OP_REL . EXP_MAT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    EXP_MAT                        shift and go to state 101
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 67

    (61) OP_REL -> EQUALS .

    LPAREN          reduce using rule 61 (OP_REL -> EQUALS .)
    NUM_INT         reduce using rule 61 (OP_REL -> EQUALS .)
    NUM_REAL        reduce using rule 61 (OP_REL -> EQUALS .)
    ID              reduce using rule 61 (OP_REL -> EQUALS .)


state 68

    (62) OP_REL -> DIFF .

    LPAREN          reduce using rule 62 (OP_REL -> DIFF .)
    NUM_INT         reduce using rule 62 (OP_REL -> DIFF .)
    NUM_REAL        reduce using rule 62 (OP_REL -> DIFF .)
    ID              reduce using rule 62 (OP_REL -> DIFF .)


state 69

    (63) OP_REL -> LT .

    LPAREN          reduce using rule 63 (OP_REL -> LT .)
    NUM_INT         reduce using rule 63 (OP_REL -> LT .)
    NUM_REAL        reduce using rule 63 (OP_REL -> LT .)
    ID              reduce using rule 63 (OP_REL -> LT .)


state 70

    (64) OP_REL -> LE .

    LPAREN          reduce using rule 64 (OP_REL -> LE .)
    NUM_INT         reduce using rule 64 (OP_REL -> LE .)
    NUM_REAL        reduce using rule 64 (OP_REL -> LE .)
    ID              reduce using rule 64 (OP_REL -> LE .)


state 71

    (65) OP_REL -> GT .

    LPAREN          reduce using rule 65 (OP_REL -> GT .)
    NUM_INT         reduce using rule 65 (OP_REL -> GT .)
    NUM_REAL        reduce using rule 65 (OP_REL -> GT .)
    ID              reduce using rule 65 (OP_REL -> GT .)


state 72

    (66) OP_REL -> GE .

    LPAREN          reduce using rule 66 (OP_REL -> GE .)
    NUM_INT         reduce using rule 66 (OP_REL -> GE .)
    NUM_REAL        reduce using rule 66 (OP_REL -> GE .)
    ID              reduce using rule 66 (OP_REL -> GE .)


state 73

    (67) EXP_MAT -> TERMO PLUS . EXP_MAT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    TERMO                          shift and go to state 35
    EXP_MAT                        shift and go to state 102
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 74

    (68) EXP_MAT -> TERMO MINUS . EXP_MAT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    TERMO                          shift and go to state 35
    EXP_MAT                        shift and go to state 103
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 75

    (70) TERMO -> FATOR TIMES . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    FATOR                          shift and go to state 36
    TERMO                          shift and go to state 104
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 76

    (71) TERMO -> FATOR DIVIDE . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    FATOR                          shift and go to state 36
    TERMO                          shift and go to state 105
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 77

    (74) FATOR -> LPAREN EXP_MAT . RPAREN

    RPAREN          shift and go to state 106


state 78

    (45) COMANDO -> IF EXP_LOGICA THEN . BLOCO ELSE BLOCO
    (46) COMANDO -> IF EXP_LOGICA THEN . BLOCO
    (39) BLOCO -> . BEGIN LISTA_COM END
    (40) BLOCO -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    BEGIN           shift and go to state 64
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    ID              shift and go to state 20

    BLOCO                          shift and go to state 107
    COMANDO                        shift and go to state 65
    NOME                           shift and go to state 15

state 79

    (47) COMANDO -> WRITE LPAREN EXP_MAT . RPAREN

    RPAREN          shift and go to state 108


state 80

    (48) COMANDO -> WRITE LPAREN STRING . RPAREN

    RPAREN          shift and go to state 109


state 81

    (49) COMANDO -> READ LPAREN NOME . RPAREN

    RPAREN          shift and go to state 110


state 82

    (80) NOME_CONT -> DOT ID . NOME_CONT
    (80) NOME_CONT -> . DOT ID NOME_CONT
    (81) NOME_CONT -> . LBRACKET EXP_MAT RBRACKET NOME_CONT
    (82) NOME_CONT -> . empty
    (83) empty -> .

    DOT             shift and go to state 46
    LBRACKET        shift and go to state 47
    ASSIGN          reduce using rule 83 (empty -> .)
    TIMES           reduce using rule 83 (empty -> .)
    DIVIDE          reduce using rule 83 (empty -> .)
    PLUS            reduce using rule 83 (empty -> .)
    MINUS           reduce using rule 83 (empty -> .)
    EQUALS          reduce using rule 83 (empty -> .)
    DIFF            reduce using rule 83 (empty -> .)
    LT              reduce using rule 83 (empty -> .)
    LE              reduce using rule 83 (empty -> .)
    GT              reduce using rule 83 (empty -> .)
    GE              reduce using rule 83 (empty -> .)
    BEGIN           reduce using rule 83 (empty -> .)
    WHILE           reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    WRITE           reduce using rule 83 (empty -> .)
    READ            reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    THEN            reduce using rule 83 (empty -> .)
    RPAREN          reduce using rule 83 (empty -> .)
    RBRACKET        reduce using rule 83 (empty -> .)
    SEMICOLON       reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)
    ELSE            reduce using rule 83 (empty -> .)
    FUNCTION        reduce using rule 83 (empty -> .)
    COMMA           reduce using rule 83 (empty -> .)

    NOME_CONT                      shift and go to state 111
    empty                          shift and go to state 48

state 83

    (81) NOME_CONT -> LBRACKET EXP_MAT . RBRACKET NOME_CONT

    RBRACKET        shift and go to state 112


state 84

    (4) DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR LISTA_FUNC .

    BEGIN           reduce using rule 4 (DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR LISTA_FUNC .)


state 85

    (30) LISTA_FUNC -> FUNCAO . LISTA_FUNC
    (30) LISTA_FUNC -> . FUNCAO LISTA_FUNC
    (31) LISTA_FUNC -> . empty
    (32) FUNCAO -> . FUNCTION ID LPAREN PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO
    (33) FUNCAO -> . FUNCTION ID LPAREN RPAREN COLON TIPO_DADO BLOCO_FUNCAO
    (83) empty -> .

    FUNCTION        shift and go to state 87
    BEGIN           reduce using rule 83 (empty -> .)

    FUNCAO                         shift and go to state 85
    LISTA_FUNC                     shift and go to state 113
    empty                          shift and go to state 86

state 86

    (31) LISTA_FUNC -> empty .

    BEGIN           reduce using rule 31 (LISTA_FUNC -> empty .)


state 87

    (32) FUNCAO -> FUNCTION . ID LPAREN PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO
    (33) FUNCAO -> FUNCTION . ID LPAREN RPAREN COLON TIPO_DADO BLOCO_FUNCAO

    ID              shift and go to state 114


state 88

    (23) DEF_VAR -> VAR LISTA_VAR .

    FUNCTION        reduce using rule 23 (DEF_VAR -> VAR LISTA_VAR .)
    BEGIN           reduce using rule 23 (DEF_VAR -> VAR LISTA_VAR .)
    WHILE           reduce using rule 23 (DEF_VAR -> VAR LISTA_VAR .)
    IF              reduce using rule 23 (DEF_VAR -> VAR LISTA_VAR .)
    WRITE           reduce using rule 23 (DEF_VAR -> VAR LISTA_VAR .)
    READ            reduce using rule 23 (DEF_VAR -> VAR LISTA_VAR .)
    ID              reduce using rule 23 (DEF_VAR -> VAR LISTA_VAR .)


state 89

    (25) LISTA_VAR -> VARIAVEL . SEMICOLON LISTA_VAR
    (26) LISTA_VAR -> VARIAVEL .

    SEMICOLON       shift and go to state 115
    FUNCTION        reduce using rule 26 (LISTA_VAR -> VARIAVEL .)
    BEGIN           reduce using rule 26 (LISTA_VAR -> VARIAVEL .)
    WHILE           reduce using rule 26 (LISTA_VAR -> VARIAVEL .)
    IF              reduce using rule 26 (LISTA_VAR -> VARIAVEL .)
    WRITE           reduce using rule 26 (LISTA_VAR -> VARIAVEL .)
    READ            reduce using rule 26 (LISTA_VAR -> VARIAVEL .)
    ID              reduce using rule 26 (LISTA_VAR -> VARIAVEL .)
    END             reduce using rule 26 (LISTA_VAR -> VARIAVEL .)


state 90

    (27) VARIAVEL -> LISTA_ID . COLON TIPO_DADO

    COLON           shift and go to state 116


state 91

    (28) LISTA_ID -> ID . COMMA LISTA_ID
    (29) LISTA_ID -> ID .

    COMMA           shift and go to state 117
    COLON           reduce using rule 29 (LISTA_ID -> ID .)


state 92

    (15) LISTA_TIPOS -> TIPO SEMICOLON . LISTA_TIPOS
    (15) LISTA_TIPOS -> . TIPO SEMICOLON LISTA_TIPOS
    (16) LISTA_TIPOS -> . TIPO
    (17) TIPO -> . ID ASSIGN TIPO_DADO

    ID              shift and go to state 54

    TIPO                           shift and go to state 53
    LISTA_TIPOS                    shift and go to state 118

state 93

    (17) TIPO -> ID ASSIGN . TIPO_DADO
    (18) TIPO_DADO -> . INTEGER
    (19) TIPO_DADO -> . REAL
    (20) TIPO_DADO -> . ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD LISTA_VAR END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 121
    REAL            shift and go to state 122
    ARRAY           shift and go to state 123
    RECORD          shift and go to state 124
    ID              shift and go to state 119

    TIPO_DADO                      shift and go to state 120

state 94

    (10) CONSTANTE -> ID ASSIGN CONST_VALOR . SEMICOLON

    SEMICOLON       shift and go to state 125


state 95

    (11) CONST_VALOR -> STRING .

    SEMICOLON       reduce using rule 11 (CONST_VALOR -> STRING .)


state 96

    (12) CONST_VALOR -> EXP_MAT .

    SEMICOLON       reduce using rule 12 (CONST_VALOR -> EXP_MAT .)


state 97

    (52) VALOR -> ID LISTA_ARG .

    SEMICOLON       reduce using rule 52 (VALOR -> ID LISTA_ARG .)
    END             reduce using rule 52 (VALOR -> ID LISTA_ARG .)
    ELSE            reduce using rule 52 (VALOR -> ID LISTA_ARG .)
    FUNCTION        reduce using rule 52 (VALOR -> ID LISTA_ARG .)
    BEGIN           reduce using rule 52 (VALOR -> ID LISTA_ARG .)


state 98

    (53) LISTA_ARG -> LPAREN . LISTA_EXP RPAREN
    (54) LISTA_ARG -> LPAREN . RPAREN
    (56) LISTA_EXP -> . EXP_MAT COMMA LISTA_EXP
    (57) LISTA_EXP -> . EXP_MAT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    RPAREN          shift and go to state 127
    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    LISTA_EXP                      shift and go to state 126
    EXP_MAT                        shift and go to state 128
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 99

    (55) LISTA_ARG -> empty .
    (82) NOME_CONT -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (LISTA_ARG -> empty .)
  ! reduce/reduce conflict for END resolved using rule 55 (LISTA_ARG -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (LISTA_ARG -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 55 (LISTA_ARG -> empty .)
  ! reduce/reduce conflict for BEGIN resolved using rule 55 (LISTA_ARG -> empty .)
    SEMICOLON       reduce using rule 55 (LISTA_ARG -> empty .)
    END             reduce using rule 55 (LISTA_ARG -> empty .)
    ELSE            reduce using rule 55 (LISTA_ARG -> empty .)
    FUNCTION        reduce using rule 55 (LISTA_ARG -> empty .)
    BEGIN           reduce using rule 55 (LISTA_ARG -> empty .)
    TIMES           reduce using rule 82 (NOME_CONT -> empty .)
    DIVIDE          reduce using rule 82 (NOME_CONT -> empty .)
    PLUS            reduce using rule 82 (NOME_CONT -> empty .)
    MINUS           reduce using rule 82 (NOME_CONT -> empty .)

  ! SEMICOLON       [ reduce using rule 82 (NOME_CONT -> empty .) ]
  ! END             [ reduce using rule 82 (NOME_CONT -> empty .) ]
  ! ELSE            [ reduce using rule 82 (NOME_CONT -> empty .) ]
  ! FUNCTION        [ reduce using rule 82 (NOME_CONT -> empty .) ]
  ! BEGIN           [ reduce using rule 82 (NOME_CONT -> empty .) ]


state 100

    (39) BLOCO -> BEGIN LISTA_COM . END
    (50) COMANDO -> BEGIN LISTA_COM . END

    END             shift and go to state 129


state 101

    (59) EXP_REL -> EXP_MAT OP_REL EXP_MAT .

    BEGIN           reduce using rule 59 (EXP_REL -> EXP_MAT OP_REL EXP_MAT .)
    WHILE           reduce using rule 59 (EXP_REL -> EXP_MAT OP_REL EXP_MAT .)
    IF              reduce using rule 59 (EXP_REL -> EXP_MAT OP_REL EXP_MAT .)
    WRITE           reduce using rule 59 (EXP_REL -> EXP_MAT OP_REL EXP_MAT .)
    READ            reduce using rule 59 (EXP_REL -> EXP_MAT OP_REL EXP_MAT .)
    ID              reduce using rule 59 (EXP_REL -> EXP_MAT OP_REL EXP_MAT .)
    THEN            reduce using rule 59 (EXP_REL -> EXP_MAT OP_REL EXP_MAT .)


state 102

    (67) EXP_MAT -> TERMO PLUS EXP_MAT .

    EQUALS          reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    DIFF            reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    LT              reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    LE              reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    GT              reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    GE              reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    BEGIN           reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    WHILE           reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    IF              reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    WRITE           reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    READ            reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    ID              reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    THEN            reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    SEMICOLON       reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    END             reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    ELSE            reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    FUNCTION        reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    RPAREN          reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    RBRACKET        reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)
    COMMA           reduce using rule 67 (EXP_MAT -> TERMO PLUS EXP_MAT .)


state 103

    (68) EXP_MAT -> TERMO MINUS EXP_MAT .

    EQUALS          reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    DIFF            reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    LT              reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    LE              reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    GT              reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    GE              reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    BEGIN           reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    WHILE           reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    IF              reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    WRITE           reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    READ            reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    ID              reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    THEN            reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    SEMICOLON       reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    END             reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    ELSE            reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    FUNCTION        reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    RPAREN          reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    RBRACKET        reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)
    COMMA           reduce using rule 68 (EXP_MAT -> TERMO MINUS EXP_MAT .)


state 104

    (70) TERMO -> FATOR TIMES TERMO .

    PLUS            reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    MINUS           reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    EQUALS          reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    DIFF            reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    LT              reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    LE              reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    GT              reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    GE              reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    BEGIN           reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    WHILE           reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    IF              reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    WRITE           reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    READ            reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    ID              reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    THEN            reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    SEMICOLON       reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    END             reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    ELSE            reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    FUNCTION        reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    RPAREN          reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    RBRACKET        reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)
    COMMA           reduce using rule 70 (TERMO -> FATOR TIMES TERMO .)


state 105

    (71) TERMO -> FATOR DIVIDE TERMO .

    PLUS            reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    MINUS           reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    EQUALS          reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    DIFF            reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    LT              reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    LE              reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    GT              reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    GE              reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    BEGIN           reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    WHILE           reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    IF              reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    WRITE           reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    READ            reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    ID              reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    THEN            reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    SEMICOLON       reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    END             reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    ELSE            reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    FUNCTION        reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    RPAREN          reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    RBRACKET        reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)
    COMMA           reduce using rule 71 (TERMO -> FATOR DIVIDE TERMO .)


state 106

    (74) FATOR -> LPAREN EXP_MAT RPAREN .

    TIMES           reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    DIVIDE          reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    PLUS            reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    MINUS           reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    EQUALS          reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    DIFF            reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    LT              reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    LE              reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    GT              reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    GE              reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    BEGIN           reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    WHILE           reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    IF              reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    WRITE           reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    READ            reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    ID              reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    THEN            reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    SEMICOLON       reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    END             reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    ELSE            reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    FUNCTION        reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    RPAREN          reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    RBRACKET        reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)
    COMMA           reduce using rule 74 (FATOR -> LPAREN EXP_MAT RPAREN .)


state 107

    (45) COMANDO -> IF EXP_LOGICA THEN BLOCO . ELSE BLOCO
    (46) COMANDO -> IF EXP_LOGICA THEN BLOCO .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 130
    SEMICOLON       reduce using rule 46 (COMANDO -> IF EXP_LOGICA THEN BLOCO .)
    END             reduce using rule 46 (COMANDO -> IF EXP_LOGICA THEN BLOCO .)
    FUNCTION        reduce using rule 46 (COMANDO -> IF EXP_LOGICA THEN BLOCO .)
    BEGIN           reduce using rule 46 (COMANDO -> IF EXP_LOGICA THEN BLOCO .)

  ! ELSE            [ reduce using rule 46 (COMANDO -> IF EXP_LOGICA THEN BLOCO .) ]


state 108

    (47) COMANDO -> WRITE LPAREN EXP_MAT RPAREN .

    SEMICOLON       reduce using rule 47 (COMANDO -> WRITE LPAREN EXP_MAT RPAREN .)
    END             reduce using rule 47 (COMANDO -> WRITE LPAREN EXP_MAT RPAREN .)
    ELSE            reduce using rule 47 (COMANDO -> WRITE LPAREN EXP_MAT RPAREN .)
    FUNCTION        reduce using rule 47 (COMANDO -> WRITE LPAREN EXP_MAT RPAREN .)
    BEGIN           reduce using rule 47 (COMANDO -> WRITE LPAREN EXP_MAT RPAREN .)


state 109

    (48) COMANDO -> WRITE LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 48 (COMANDO -> WRITE LPAREN STRING RPAREN .)
    END             reduce using rule 48 (COMANDO -> WRITE LPAREN STRING RPAREN .)
    ELSE            reduce using rule 48 (COMANDO -> WRITE LPAREN STRING RPAREN .)
    FUNCTION        reduce using rule 48 (COMANDO -> WRITE LPAREN STRING RPAREN .)
    BEGIN           reduce using rule 48 (COMANDO -> WRITE LPAREN STRING RPAREN .)


state 110

    (49) COMANDO -> READ LPAREN NOME RPAREN .

    SEMICOLON       reduce using rule 49 (COMANDO -> READ LPAREN NOME RPAREN .)
    END             reduce using rule 49 (COMANDO -> READ LPAREN NOME RPAREN .)
    ELSE            reduce using rule 49 (COMANDO -> READ LPAREN NOME RPAREN .)
    FUNCTION        reduce using rule 49 (COMANDO -> READ LPAREN NOME RPAREN .)
    BEGIN           reduce using rule 49 (COMANDO -> READ LPAREN NOME RPAREN .)


state 111

    (80) NOME_CONT -> DOT ID NOME_CONT .

    ASSIGN          reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    TIMES           reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    DIVIDE          reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    PLUS            reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    MINUS           reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    EQUALS          reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    DIFF            reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    LT              reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    LE              reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    GT              reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    GE              reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    BEGIN           reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    WHILE           reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    IF              reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    WRITE           reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    READ            reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    ID              reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    THEN            reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    RPAREN          reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    RBRACKET        reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    SEMICOLON       reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    END             reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    ELSE            reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    FUNCTION        reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)
    COMMA           reduce using rule 80 (NOME_CONT -> DOT ID NOME_CONT .)


state 112

    (81) NOME_CONT -> LBRACKET EXP_MAT RBRACKET . NOME_CONT
    (80) NOME_CONT -> . DOT ID NOME_CONT
    (81) NOME_CONT -> . LBRACKET EXP_MAT RBRACKET NOME_CONT
    (82) NOME_CONT -> . empty
    (83) empty -> .

    DOT             shift and go to state 46
    LBRACKET        shift and go to state 47
    ASSIGN          reduce using rule 83 (empty -> .)
    TIMES           reduce using rule 83 (empty -> .)
    DIVIDE          reduce using rule 83 (empty -> .)
    PLUS            reduce using rule 83 (empty -> .)
    MINUS           reduce using rule 83 (empty -> .)
    EQUALS          reduce using rule 83 (empty -> .)
    DIFF            reduce using rule 83 (empty -> .)
    LT              reduce using rule 83 (empty -> .)
    LE              reduce using rule 83 (empty -> .)
    GT              reduce using rule 83 (empty -> .)
    GE              reduce using rule 83 (empty -> .)
    BEGIN           reduce using rule 83 (empty -> .)
    WHILE           reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    WRITE           reduce using rule 83 (empty -> .)
    READ            reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    THEN            reduce using rule 83 (empty -> .)
    RPAREN          reduce using rule 83 (empty -> .)
    RBRACKET        reduce using rule 83 (empty -> .)
    SEMICOLON       reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)
    ELSE            reduce using rule 83 (empty -> .)
    FUNCTION        reduce using rule 83 (empty -> .)
    COMMA           reduce using rule 83 (empty -> .)

    NOME_CONT                      shift and go to state 131
    empty                          shift and go to state 48

state 113

    (30) LISTA_FUNC -> FUNCAO LISTA_FUNC .

    BEGIN           reduce using rule 30 (LISTA_FUNC -> FUNCAO LISTA_FUNC .)


state 114

    (32) FUNCAO -> FUNCTION ID . LPAREN PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO
    (33) FUNCAO -> FUNCTION ID . LPAREN RPAREN COLON TIPO_DADO BLOCO_FUNCAO

    LPAREN          shift and go to state 132


state 115

    (25) LISTA_VAR -> VARIAVEL SEMICOLON . LISTA_VAR
    (25) LISTA_VAR -> . VARIAVEL SEMICOLON LISTA_VAR
    (26) LISTA_VAR -> . VARIAVEL
    (27) VARIAVEL -> . LISTA_ID COLON TIPO_DADO
    (28) LISTA_ID -> . ID COMMA LISTA_ID
    (29) LISTA_ID -> . ID

    ID              shift and go to state 91

    VARIAVEL                       shift and go to state 89
    LISTA_VAR                      shift and go to state 133
    LISTA_ID                       shift and go to state 90

state 116

    (27) VARIAVEL -> LISTA_ID COLON . TIPO_DADO
    (18) TIPO_DADO -> . INTEGER
    (19) TIPO_DADO -> . REAL
    (20) TIPO_DADO -> . ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD LISTA_VAR END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 121
    REAL            shift and go to state 122
    ARRAY           shift and go to state 123
    RECORD          shift and go to state 124
    ID              shift and go to state 119

    TIPO_DADO                      shift and go to state 134

state 117

    (28) LISTA_ID -> ID COMMA . LISTA_ID
    (28) LISTA_ID -> . ID COMMA LISTA_ID
    (29) LISTA_ID -> . ID

    ID              shift and go to state 91

    LISTA_ID                       shift and go to state 135

state 118

    (15) LISTA_TIPOS -> TIPO SEMICOLON LISTA_TIPOS .

    VAR             reduce using rule 15 (LISTA_TIPOS -> TIPO SEMICOLON LISTA_TIPOS .)
    FUNCTION        reduce using rule 15 (LISTA_TIPOS -> TIPO SEMICOLON LISTA_TIPOS .)
    BEGIN           reduce using rule 15 (LISTA_TIPOS -> TIPO SEMICOLON LISTA_TIPOS .)


state 119

    (22) TIPO_DADO -> ID .

    SEMICOLON       reduce using rule 22 (TIPO_DADO -> ID .)
    VAR             reduce using rule 22 (TIPO_DADO -> ID .)
    FUNCTION        reduce using rule 22 (TIPO_DADO -> ID .)
    BEGIN           reduce using rule 22 (TIPO_DADO -> ID .)
    WHILE           reduce using rule 22 (TIPO_DADO -> ID .)
    IF              reduce using rule 22 (TIPO_DADO -> ID .)
    WRITE           reduce using rule 22 (TIPO_DADO -> ID .)
    READ            reduce using rule 22 (TIPO_DADO -> ID .)
    ID              reduce using rule 22 (TIPO_DADO -> ID .)
    END             reduce using rule 22 (TIPO_DADO -> ID .)
    COMMA           reduce using rule 22 (TIPO_DADO -> ID .)
    RPAREN          reduce using rule 22 (TIPO_DADO -> ID .)


state 120

    (17) TIPO -> ID ASSIGN TIPO_DADO .

    SEMICOLON       reduce using rule 17 (TIPO -> ID ASSIGN TIPO_DADO .)
    VAR             reduce using rule 17 (TIPO -> ID ASSIGN TIPO_DADO .)
    FUNCTION        reduce using rule 17 (TIPO -> ID ASSIGN TIPO_DADO .)
    BEGIN           reduce using rule 17 (TIPO -> ID ASSIGN TIPO_DADO .)


state 121

    (18) TIPO_DADO -> INTEGER .

    SEMICOLON       reduce using rule 18 (TIPO_DADO -> INTEGER .)
    VAR             reduce using rule 18 (TIPO_DADO -> INTEGER .)
    FUNCTION        reduce using rule 18 (TIPO_DADO -> INTEGER .)
    BEGIN           reduce using rule 18 (TIPO_DADO -> INTEGER .)
    WHILE           reduce using rule 18 (TIPO_DADO -> INTEGER .)
    IF              reduce using rule 18 (TIPO_DADO -> INTEGER .)
    WRITE           reduce using rule 18 (TIPO_DADO -> INTEGER .)
    READ            reduce using rule 18 (TIPO_DADO -> INTEGER .)
    ID              reduce using rule 18 (TIPO_DADO -> INTEGER .)
    END             reduce using rule 18 (TIPO_DADO -> INTEGER .)
    COMMA           reduce using rule 18 (TIPO_DADO -> INTEGER .)
    RPAREN          reduce using rule 18 (TIPO_DADO -> INTEGER .)


state 122

    (19) TIPO_DADO -> REAL .

    SEMICOLON       reduce using rule 19 (TIPO_DADO -> REAL .)
    VAR             reduce using rule 19 (TIPO_DADO -> REAL .)
    FUNCTION        reduce using rule 19 (TIPO_DADO -> REAL .)
    BEGIN           reduce using rule 19 (TIPO_DADO -> REAL .)
    WHILE           reduce using rule 19 (TIPO_DADO -> REAL .)
    IF              reduce using rule 19 (TIPO_DADO -> REAL .)
    WRITE           reduce using rule 19 (TIPO_DADO -> REAL .)
    READ            reduce using rule 19 (TIPO_DADO -> REAL .)
    ID              reduce using rule 19 (TIPO_DADO -> REAL .)
    END             reduce using rule 19 (TIPO_DADO -> REAL .)
    COMMA           reduce using rule 19 (TIPO_DADO -> REAL .)
    RPAREN          reduce using rule 19 (TIPO_DADO -> REAL .)


state 123

    (20) TIPO_DADO -> ARRAY . LBRACKET NUM_INT RBRACKET OF TIPO_DADO

    LBRACKET        shift and go to state 136


state 124

    (21) TIPO_DADO -> RECORD . LISTA_VAR END
    (25) LISTA_VAR -> . VARIAVEL SEMICOLON LISTA_VAR
    (26) LISTA_VAR -> . VARIAVEL
    (27) VARIAVEL -> . LISTA_ID COLON TIPO_DADO
    (28) LISTA_ID -> . ID COMMA LISTA_ID
    (29) LISTA_ID -> . ID

    ID              shift and go to state 91

    LISTA_VAR                      shift and go to state 137
    VARIAVEL                       shift and go to state 89
    LISTA_ID                       shift and go to state 90

state 125

    (10) CONSTANTE -> ID ASSIGN CONST_VALOR SEMICOLON .

    ID              reduce using rule 10 (CONSTANTE -> ID ASSIGN CONST_VALOR SEMICOLON .)
    TYPE            reduce using rule 10 (CONSTANTE -> ID ASSIGN CONST_VALOR SEMICOLON .)
    VAR             reduce using rule 10 (CONSTANTE -> ID ASSIGN CONST_VALOR SEMICOLON .)
    FUNCTION        reduce using rule 10 (CONSTANTE -> ID ASSIGN CONST_VALOR SEMICOLON .)
    BEGIN           reduce using rule 10 (CONSTANTE -> ID ASSIGN CONST_VALOR SEMICOLON .)


state 126

    (53) LISTA_ARG -> LPAREN LISTA_EXP . RPAREN

    RPAREN          shift and go to state 138


state 127

    (54) LISTA_ARG -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 54 (LISTA_ARG -> LPAREN RPAREN .)
    END             reduce using rule 54 (LISTA_ARG -> LPAREN RPAREN .)
    ELSE            reduce using rule 54 (LISTA_ARG -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 54 (LISTA_ARG -> LPAREN RPAREN .)
    BEGIN           reduce using rule 54 (LISTA_ARG -> LPAREN RPAREN .)


state 128

    (56) LISTA_EXP -> EXP_MAT . COMMA LISTA_EXP
    (57) LISTA_EXP -> EXP_MAT .

    COMMA           shift and go to state 139
    RPAREN          reduce using rule 57 (LISTA_EXP -> EXP_MAT .)


state 129

    (39) BLOCO -> BEGIN LISTA_COM END .
    (50) COMANDO -> BEGIN LISTA_COM END .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
  ! reduce/reduce conflict for END resolved using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
    SEMICOLON       reduce using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
    END             reduce using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
    ELSE            reduce using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
    FUNCTION        reduce using rule 39 (BLOCO -> BEGIN LISTA_COM END .)
    BEGIN           reduce using rule 39 (BLOCO -> BEGIN LISTA_COM END .)

  ! SEMICOLON       [ reduce using rule 50 (COMANDO -> BEGIN LISTA_COM END .) ]
  ! END             [ reduce using rule 50 (COMANDO -> BEGIN LISTA_COM END .) ]
  ! ELSE            [ reduce using rule 50 (COMANDO -> BEGIN LISTA_COM END .) ]
  ! FUNCTION        [ reduce using rule 50 (COMANDO -> BEGIN LISTA_COM END .) ]
  ! BEGIN           [ reduce using rule 50 (COMANDO -> BEGIN LISTA_COM END .) ]


state 130

    (45) COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE . BLOCO
    (39) BLOCO -> . BEGIN LISTA_COM END
    (40) BLOCO -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    BEGIN           shift and go to state 64
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    ID              shift and go to state 20

    BLOCO                          shift and go to state 140
    COMANDO                        shift and go to state 65
    NOME                           shift and go to state 15

state 131

    (81) NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .

    ASSIGN          reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    TIMES           reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    DIVIDE          reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    PLUS            reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    MINUS           reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    EQUALS          reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    DIFF            reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    LT              reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    LE              reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    GT              reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    GE              reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    BEGIN           reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    WHILE           reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    IF              reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    WRITE           reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    READ            reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    ID              reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    THEN            reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    RPAREN          reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    RBRACKET        reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    SEMICOLON       reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    END             reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    ELSE            reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    FUNCTION        reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)
    COMMA           reduce using rule 81 (NOME_CONT -> LBRACKET EXP_MAT RBRACKET NOME_CONT .)


state 132

    (32) FUNCAO -> FUNCTION ID LPAREN . PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO
    (33) FUNCAO -> FUNCTION ID LPAREN . RPAREN COLON TIPO_DADO BLOCO_FUNCAO
    (34) PARAM_FORM -> . PARAM COMMA PARAM_FORM
    (35) PARAM_FORM -> . PARAM
    (36) PARAM -> . LISTA_ID COLON TIPO_DADO
    (28) LISTA_ID -> . ID COMMA LISTA_ID
    (29) LISTA_ID -> . ID

    RPAREN          shift and go to state 142
    ID              shift and go to state 91

    PARAM_FORM                     shift and go to state 141
    PARAM                          shift and go to state 143
    LISTA_ID                       shift and go to state 144

state 133

    (25) LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .

    FUNCTION        reduce using rule 25 (LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .)
    BEGIN           reduce using rule 25 (LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .)
    WHILE           reduce using rule 25 (LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .)
    IF              reduce using rule 25 (LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .)
    WRITE           reduce using rule 25 (LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .)
    READ            reduce using rule 25 (LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .)
    ID              reduce using rule 25 (LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .)
    END             reduce using rule 25 (LISTA_VAR -> VARIAVEL SEMICOLON LISTA_VAR .)


state 134

    (27) VARIAVEL -> LISTA_ID COLON TIPO_DADO .

    SEMICOLON       reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)
    FUNCTION        reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)
    BEGIN           reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)
    WHILE           reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)
    IF              reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)
    WRITE           reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)
    READ            reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)
    ID              reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)
    END             reduce using rule 27 (VARIAVEL -> LISTA_ID COLON TIPO_DADO .)


state 135

    (28) LISTA_ID -> ID COMMA LISTA_ID .

    COLON           reduce using rule 28 (LISTA_ID -> ID COMMA LISTA_ID .)


state 136

    (20) TIPO_DADO -> ARRAY LBRACKET . NUM_INT RBRACKET OF TIPO_DADO

    NUM_INT         shift and go to state 145


state 137

    (21) TIPO_DADO -> RECORD LISTA_VAR . END

    END             shift and go to state 146


state 138

    (53) LISTA_ARG -> LPAREN LISTA_EXP RPAREN .

    SEMICOLON       reduce using rule 53 (LISTA_ARG -> LPAREN LISTA_EXP RPAREN .)
    END             reduce using rule 53 (LISTA_ARG -> LPAREN LISTA_EXP RPAREN .)
    ELSE            reduce using rule 53 (LISTA_ARG -> LPAREN LISTA_EXP RPAREN .)
    FUNCTION        reduce using rule 53 (LISTA_ARG -> LPAREN LISTA_EXP RPAREN .)
    BEGIN           reduce using rule 53 (LISTA_ARG -> LPAREN LISTA_EXP RPAREN .)


state 139

    (56) LISTA_EXP -> EXP_MAT COMMA . LISTA_EXP
    (56) LISTA_EXP -> . EXP_MAT COMMA LISTA_EXP
    (57) LISTA_EXP -> . EXP_MAT
    (67) EXP_MAT -> . TERMO PLUS EXP_MAT
    (68) EXP_MAT -> . TERMO MINUS EXP_MAT
    (69) EXP_MAT -> . TERMO
    (70) TERMO -> . FATOR TIMES TERMO
    (71) TERMO -> . FATOR DIVIDE TERMO
    (72) TERMO -> . FATOR
    (73) FATOR -> . PARAMETRO
    (74) FATOR -> . LPAREN EXP_MAT RPAREN
    (75) PARAMETRO -> . NOME
    (76) PARAMETRO -> . NUM_INT
    (77) PARAMETRO -> . NUM_REAL
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    LPAREN          shift and go to state 38
    NUM_INT         shift and go to state 40
    NUM_REAL        shift and go to state 41
    ID              shift and go to state 20

    EXP_MAT                        shift and go to state 128
    LISTA_EXP                      shift and go to state 147
    TERMO                          shift and go to state 35
    FATOR                          shift and go to state 36
    PARAMETRO                      shift and go to state 37
    NOME                           shift and go to state 39

state 140

    (45) COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE BLOCO .

    SEMICOLON       reduce using rule 45 (COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE BLOCO .)
    END             reduce using rule 45 (COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE BLOCO .)
    ELSE            reduce using rule 45 (COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE BLOCO .)
    FUNCTION        reduce using rule 45 (COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE BLOCO .)
    BEGIN           reduce using rule 45 (COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE BLOCO .)


state 141

    (32) FUNCAO -> FUNCTION ID LPAREN PARAM_FORM . RPAREN COLON TIPO_DADO BLOCO_FUNCAO

    RPAREN          shift and go to state 148


state 142

    (33) FUNCAO -> FUNCTION ID LPAREN RPAREN . COLON TIPO_DADO BLOCO_FUNCAO

    COLON           shift and go to state 149


state 143

    (34) PARAM_FORM -> PARAM . COMMA PARAM_FORM
    (35) PARAM_FORM -> PARAM .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 35 (PARAM_FORM -> PARAM .)


state 144

    (36) PARAM -> LISTA_ID . COLON TIPO_DADO

    COLON           shift and go to state 151


state 145

    (20) TIPO_DADO -> ARRAY LBRACKET NUM_INT . RBRACKET OF TIPO_DADO

    RBRACKET        shift and go to state 152


state 146

    (21) TIPO_DADO -> RECORD LISTA_VAR END .

    SEMICOLON       reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    VAR             reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    FUNCTION        reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    BEGIN           reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    WHILE           reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    IF              reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    WRITE           reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    READ            reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    ID              reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    END             reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    COMMA           reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)
    RPAREN          reduce using rule 21 (TIPO_DADO -> RECORD LISTA_VAR END .)


state 147

    (56) LISTA_EXP -> EXP_MAT COMMA LISTA_EXP .

    RPAREN          reduce using rule 56 (LISTA_EXP -> EXP_MAT COMMA LISTA_EXP .)


state 148

    (32) FUNCAO -> FUNCTION ID LPAREN PARAM_FORM RPAREN . COLON TIPO_DADO BLOCO_FUNCAO

    COLON           shift and go to state 153


state 149

    (33) FUNCAO -> FUNCTION ID LPAREN RPAREN COLON . TIPO_DADO BLOCO_FUNCAO
    (18) TIPO_DADO -> . INTEGER
    (19) TIPO_DADO -> . REAL
    (20) TIPO_DADO -> . ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD LISTA_VAR END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 121
    REAL            shift and go to state 122
    ARRAY           shift and go to state 123
    RECORD          shift and go to state 124
    ID              shift and go to state 119

    TIPO_DADO                      shift and go to state 154

state 150

    (34) PARAM_FORM -> PARAM COMMA . PARAM_FORM
    (34) PARAM_FORM -> . PARAM COMMA PARAM_FORM
    (35) PARAM_FORM -> . PARAM
    (36) PARAM -> . LISTA_ID COLON TIPO_DADO
    (28) LISTA_ID -> . ID COMMA LISTA_ID
    (29) LISTA_ID -> . ID

    ID              shift and go to state 91

    PARAM                          shift and go to state 143
    PARAM_FORM                     shift and go to state 155
    LISTA_ID                       shift and go to state 144

state 151

    (36) PARAM -> LISTA_ID COLON . TIPO_DADO
    (18) TIPO_DADO -> . INTEGER
    (19) TIPO_DADO -> . REAL
    (20) TIPO_DADO -> . ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD LISTA_VAR END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 121
    REAL            shift and go to state 122
    ARRAY           shift and go to state 123
    RECORD          shift and go to state 124
    ID              shift and go to state 119

    TIPO_DADO                      shift and go to state 156

state 152

    (20) TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET . OF TIPO_DADO

    OF              shift and go to state 157


state 153

    (32) FUNCAO -> FUNCTION ID LPAREN PARAM_FORM RPAREN COLON . TIPO_DADO BLOCO_FUNCAO
    (18) TIPO_DADO -> . INTEGER
    (19) TIPO_DADO -> . REAL
    (20) TIPO_DADO -> . ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD LISTA_VAR END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 121
    REAL            shift and go to state 122
    ARRAY           shift and go to state 123
    RECORD          shift and go to state 124
    ID              shift and go to state 119

    TIPO_DADO                      shift and go to state 158

state 154

    (33) FUNCAO -> FUNCTION ID LPAREN RPAREN COLON TIPO_DADO . BLOCO_FUNCAO
    (37) BLOCO_FUNCAO -> . DEF_VAR BLOCO
    (38) BLOCO_FUNCAO -> . BLOCO
    (23) DEF_VAR -> . VAR LISTA_VAR
    (24) DEF_VAR -> . empty
    (39) BLOCO -> . BEGIN LISTA_COM END
    (40) BLOCO -> . COMANDO
    (83) empty -> .
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 50
    BEGIN           shift and go to state 64
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    ID              shift and go to state 20

  ! BEGIN           [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! WRITE           [ reduce using rule 83 (empty -> .) ]
  ! READ            [ reduce using rule 83 (empty -> .) ]
  ! ID              [ reduce using rule 83 (empty -> .) ]

    BLOCO_FUNCAO                   shift and go to state 159
    DEF_VAR                        shift and go to state 160
    BLOCO                          shift and go to state 161
    empty                          shift and go to state 51
    COMANDO                        shift and go to state 65
    NOME                           shift and go to state 15

state 155

    (34) PARAM_FORM -> PARAM COMMA PARAM_FORM .

    RPAREN          reduce using rule 34 (PARAM_FORM -> PARAM COMMA PARAM_FORM .)


state 156

    (36) PARAM -> LISTA_ID COLON TIPO_DADO .

    COMMA           reduce using rule 36 (PARAM -> LISTA_ID COLON TIPO_DADO .)
    RPAREN          reduce using rule 36 (PARAM -> LISTA_ID COLON TIPO_DADO .)


state 157

    (20) TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF . TIPO_DADO
    (18) TIPO_DADO -> . INTEGER
    (19) TIPO_DADO -> . REAL
    (20) TIPO_DADO -> . ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD LISTA_VAR END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 121
    REAL            shift and go to state 122
    ARRAY           shift and go to state 123
    RECORD          shift and go to state 124
    ID              shift and go to state 119

    TIPO_DADO                      shift and go to state 162

state 158

    (32) FUNCAO -> FUNCTION ID LPAREN PARAM_FORM RPAREN COLON TIPO_DADO . BLOCO_FUNCAO
    (37) BLOCO_FUNCAO -> . DEF_VAR BLOCO
    (38) BLOCO_FUNCAO -> . BLOCO
    (23) DEF_VAR -> . VAR LISTA_VAR
    (24) DEF_VAR -> . empty
    (39) BLOCO -> . BEGIN LISTA_COM END
    (40) BLOCO -> . COMANDO
    (83) empty -> .
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    VAR             shift and go to state 50
    BEGIN           shift and go to state 64
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    ID              shift and go to state 20

  ! BEGIN           [ reduce using rule 83 (empty -> .) ]
  ! WHILE           [ reduce using rule 83 (empty -> .) ]
  ! IF              [ reduce using rule 83 (empty -> .) ]
  ! WRITE           [ reduce using rule 83 (empty -> .) ]
  ! READ            [ reduce using rule 83 (empty -> .) ]
  ! ID              [ reduce using rule 83 (empty -> .) ]

    BLOCO_FUNCAO                   shift and go to state 163
    DEF_VAR                        shift and go to state 160
    BLOCO                          shift and go to state 161
    empty                          shift and go to state 51
    COMANDO                        shift and go to state 65
    NOME                           shift and go to state 15

state 159

    (33) FUNCAO -> FUNCTION ID LPAREN RPAREN COLON TIPO_DADO BLOCO_FUNCAO .

    FUNCTION        reduce using rule 33 (FUNCAO -> FUNCTION ID LPAREN RPAREN COLON TIPO_DADO BLOCO_FUNCAO .)
    BEGIN           reduce using rule 33 (FUNCAO -> FUNCTION ID LPAREN RPAREN COLON TIPO_DADO BLOCO_FUNCAO .)


state 160

    (37) BLOCO_FUNCAO -> DEF_VAR . BLOCO
    (39) BLOCO -> . BEGIN LISTA_COM END
    (40) BLOCO -> . COMANDO
    (43) COMANDO -> . NOME ASSIGN VALOR
    (44) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (45) COMANDO -> . IF EXP_LOGICA THEN BLOCO ELSE BLOCO
    (46) COMANDO -> . IF EXP_LOGICA THEN BLOCO
    (47) COMANDO -> . WRITE LPAREN EXP_MAT RPAREN
    (48) COMANDO -> . WRITE LPAREN STRING RPAREN
    (49) COMANDO -> . READ LPAREN NOME RPAREN
    (50) COMANDO -> . BEGIN LISTA_COM END
    (78) NOME -> . ID NOME_CONT
    (79) NOME -> . ID

    BEGIN           shift and go to state 64
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19
    ID              shift and go to state 20

    BLOCO                          shift and go to state 164
    COMANDO                        shift and go to state 65
    NOME                           shift and go to state 15

state 161

    (38) BLOCO_FUNCAO -> BLOCO .

    FUNCTION        reduce using rule 38 (BLOCO_FUNCAO -> BLOCO .)
    BEGIN           reduce using rule 38 (BLOCO_FUNCAO -> BLOCO .)


state 162

    (20) TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .

    SEMICOLON       reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    VAR             reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    FUNCTION        reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    BEGIN           reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    WHILE           reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    IF              reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    WRITE           reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    READ            reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    ID              reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    END             reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    COMMA           reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)
    RPAREN          reduce using rule 20 (TIPO_DADO -> ARRAY LBRACKET NUM_INT RBRACKET OF TIPO_DADO .)


state 163

    (32) FUNCAO -> FUNCTION ID LPAREN PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO .

    FUNCTION        reduce using rule 32 (FUNCAO -> FUNCTION ID LPAREN PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO .)
    BEGIN           reduce using rule 32 (FUNCAO -> FUNCTION ID LPAREN PARAM_FORM RPAREN COLON TIPO_DADO BLOCO_FUNCAO .)


state 164

    (37) BLOCO_FUNCAO -> DEF_VAR BLOCO .

    FUNCTION        reduce using rule 37 (BLOCO_FUNCAO -> DEF_VAR BLOCO .)
    BEGIN           reduce using rule 37 (BLOCO_FUNCAO -> DEF_VAR BLOCO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BEGIN in state 4 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 107 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 154 resolved as shift
WARNING: shift/reduce conflict for READ in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 158 resolved as shift
WARNING: shift/reduce conflict for IF in state 158 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 158 resolved as shift
WARNING: shift/reduce conflict for READ in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (DECLARACOES -> empty)
WARNING: rejected rule (DEF_CONST -> empty) in state 9
WARNING: reduce/reduce conflict in state 20 resolved using rule (NOME -> ID)
WARNING: rejected rule (empty -> <empty>) in state 20
WARNING: reduce/reduce conflict in state 62 resolved using rule (NOME -> ID)
WARNING: rejected rule (empty -> <empty>) in state 62
WARNING: reduce/reduce conflict in state 99 resolved using rule (LISTA_ARG -> empty)
WARNING: rejected rule (NOME_CONT -> empty) in state 99
WARNING: reduce/reduce conflict in state 129 resolved using rule (BLOCO -> BEGIN LISTA_COM END)
WARNING: rejected rule (COMANDO -> BEGIN LISTA_COM END) in state 129
